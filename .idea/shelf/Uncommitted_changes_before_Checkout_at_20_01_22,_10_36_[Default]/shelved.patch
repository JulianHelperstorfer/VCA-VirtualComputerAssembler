Index: src/at/vca/model/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/at/vca/model/Main.java b/src/at/vca/model/Main.java
--- a/src/at/vca/model/Main.java	(revision 57271c78d9116ac6c5275b416efd4ee27e553652)
+++ b/src/at/vca/model/Main.java	(date 1642668534767)
@@ -1,23 +1,32 @@
 package at.vca.model;
 
+import at.vca.model.helper.PasswordManagement;
 import javafx.application.Application;
 import javafx.fxml.FXMLLoader;
 import javafx.scene.Parent;
 import javafx.scene.Scene;
 import javafx.stage.Stage;
 
+import javax.crypto.BadPaddingException;
+import javax.crypto.IllegalBlockSizeException;
+import javax.crypto.NoSuchPaddingException;
+import java.security.InvalidKeyException;
+import java.security.NoSuchAlgorithmException;
+import java.util.Objects;
+
 public class Main extends Application {
 
     @Override
     public void start(Stage primaryStage) throws Exception{
-        Parent root = FXMLLoader.load(getClass().getResource("sample.fxml"));
+        Parent root = FXMLLoader.load(Objects.requireNonNull(getClass().getResource("../view/sample.fxml")));
         primaryStage.setTitle("Hello World");
         primaryStage.setScene(new Scene(root, 300, 275));
         primaryStage.show();
     }
 
 
-    public static void main(String[] args) {
+    public static void main(String[] args) throws IllegalBlockSizeException, NoSuchPaddingException, BadPaddingException, NoSuchAlgorithmException, InvalidKeyException {
         launch(args);
+        PasswordManagement.writeUserData("test","test123123");
     }
 }
Index: src/at/vca/model/helper/PasswordManagement.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/at/vca/model/helper/PasswordManagement.java b/src/at/vca/model/helper/PasswordManagement.java
new file mode 100644
--- /dev/null	(date 1642671163155)
+++ b/src/at/vca/model/helper/PasswordManagement.java	(date 1642671163155)
@@ -0,0 +1,87 @@
+package at.vca.model.helper;
+
+
+import javax.crypto.*;
+import java.io.File;
+
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.security.InvalidKeyException;
+import java.security.NoSuchAlgorithmException;
+import java.util.Arrays;
+import java.util.logging.Level;
+import java.util.logging.Logger;
+
+public class PasswordManagement {
+
+
+
+
+
+
+
+
+    public static void writeUserData(String username,String password) throws InvalidKeyException, IllegalBlockSizeException, BadPaddingException, NoSuchPaddingException, NoSuchAlgorithmException {
+
+
+        // Key generator with encrypt code
+        KeyGenerator kg = KeyGenerator.getInstance("AES");
+        // Initializing keysizee
+        kg.init(128);
+        // Creating a secret key
+        SecretKey secKey = kg.generateKey();
+
+        // Save key for Reuse
+        try {
+            saveKey(secKey);
+        } catch (IOException ex) {
+            Logger.getLogger(PasswordManagement.class.getName()).log(Level.SEVERE, null, ex);
+        }
+
+        Cipher cipher = Cipher.getInstance("AES");
+
+
+        byte[] sUserEncrypt = encrypt(username,cipher,secKey);
+        byte[] sPassEncrypt = encrypt(password,cipher,secKey);
+
+        System.out.println("user: "+ new String(sUserEncrypt));
+        System.out.println("pass: "+ new String(sPassEncrypt));
+
+
+        byte[] sUserDecrypt = decrypt(sUserEncrypt,cipher,secKey);
+        byte[] sPassDecrypt = decrypt(sPassEncrypt,cipher,secKey);
+
+        System.out.println("user: "+new String(sUserDecrypt));
+        System.out.println("pass: "+new String(sPassDecrypt));
+
+
+
+    }
+
+    private  static  byte[] encrypt(String data,Cipher cipher,SecretKey secKey) throws InvalidKeyException, IllegalBlockSizeException, BadPaddingException {
+        cipher.init(Cipher.ENCRYPT_MODE, secKey);
+        return cipher.doFinal(data.getBytes());
+    }
+
+    private static  byte[] decrypt(byte[] dataEncypt,Cipher cipher,SecretKey secKey) throws IllegalBlockSizeException, BadPaddingException, InvalidKeyException {
+        cipher.init(Cipher.DECRYPT_MODE, secKey);
+        return cipher.doFinal(dataEncypt);
+    }
+
+
+    private static void saveKey(SecretKey secKey) throws IOException {
+        FileOutputStream fos = new FileOutputStream(new File("key"));
+
+        fos.write(secKey.getEncoded());
+
+        fos.flush();
+
+        fos.close();
+
+    }
+
+    private static void saveEncryptedData(){
+
+    }
+
+}
